const mongoose = require('mongoose');
const Tour = require('../models/Tour/TourModel');
const Transport = require('../models/Transport/TransportModel');

// Script ƒë·ªÉ migration d·ªØ li·ªáu tour c√≥ transport m√°y bay
async function migrateTourFlightData() {
    try {
        console.log('üöÄ B·∫Øt ƒë·∫ßu migration d·ªØ li·ªáu tour c√≥ m√°y bay...');
        
        // T√¨m t·∫•t c·∫£ c√°c tour
        const tours = await Tour.find({}).populate('itemTransport.TransportId');
        console.log(`üìä T√¨m th·∫•y ${tours.length} tour ƒë·ªÉ ki·ªÉm tra`);
        
        let updatedCount = 0;
        
        for (const tour of tours) {
            // Ki·ªÉm tra xem tour c√≥ transport lo·∫°i "M√°y Bay" kh√¥ng
            const hasAirplaneTransport = tour.itemTransport.some(item => 
                item.TransportId && item.TransportId.transportType === 'M√°y Bay'
            );
            
            // N·∫øu c√≥ m√°y bay nh∆∞ng ch∆∞a set includesFlight = true
            if (hasAirplaneTransport && !tour.includesFlight) {
                console.log(`‚úàÔ∏è Tour "${tour.nameTour}" c√≥ m√°y bay nh∆∞ng ch∆∞a set includesFlight`);
                
                // L·∫•y th√¥ng tin gi√° v√© m√°y bay t·ª´ transport (n·∫øu c√≥)
                const airplaneTransport = tour.itemTransport.find(item => 
                    item.TransportId && item.TransportId.transportType === 'M√°y Bay'
                )?.TransportId;
                
                const updateData = {
                    includesFlight: true,
                    flightPrice: airplaneTransport?.flightPrice || 0,
                    flightPriceChildren: airplaneTransport?.flightPriceChildren || 0,
                    flightPriceLittleBaby: airplaneTransport?.flightPriceLittleBaby || 0,
                    flightPriceBaby: airplaneTransport?.flightPriceBaby || 0
                };
                
                await Tour.findByIdAndUpdate(tour._id, updateData);
                updatedCount++;
                
                console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tour "${tour.nameTour}" v·ªõi includesFlight = true`);
                console.log(`   - Gi√° v√© m√°y bay ng∆∞·ªùi l·ªõn: ${updateData.flightPrice.toLocaleString()} VNƒê`);
            }
        }
        
        console.log(`üéâ Migration ho√†n th√†nh! ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} tour`);
        
    } catch (error) {
        console.error('‚ùå L·ªói khi migration:', error);
    }
}

// H√†m ƒë·ªÉ rollback migration (n·∫øu c·∫ßn)
async function rollbackMigration() {
    try {
        console.log('üîÑ B·∫Øt ƒë·∫ßu rollback migration...');
        
        const result = await Tour.updateMany(
            { includesFlight: true },
            {
                $set: {
                    includesFlight: false,
                    flightPrice: 0,
                    flightPriceChildren: 0,
                    flightPriceLittleBaby: 0,
                    flightPriceBaby: 0
                }
            }
        );
        
        console.log(`üéâ Rollback ho√†n th√†nh! ƒê√£ reset ${result.modifiedCount} tour`);
        
    } catch (error) {
        console.error('‚ùå L·ªói khi rollback:', error);
    }
}

// H√†m ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu sau migration
async function checkMigrationResult() {
    try {
        console.log('üîç Ki·ªÉm tra k·∫øt qu·∫£ migration...');
        
        const toursWithFlight = await Tour.find({ includesFlight: true }).populate('itemTransport.TransportId');
        console.log(`‚úàÔ∏è T√¨m th·∫•y ${toursWithFlight.length} tour c√≥ includesFlight = true`);
        
        for (const tour of toursWithFlight) {
            const hasAirplane = tour.itemTransport.some(item => 
                item.TransportId && item.TransportId.transportType === 'M√°y Bay'
            );
            
            console.log(`üìã Tour: ${tour.nameTour}`);
            console.log(`   - C√≥ m√°y bay: ${hasAirplane ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Gi√° v√© m√°y bay: ${tour.flightPrice?.toLocaleString() || 0} VNƒê`);
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói khi ki·ªÉm tra:', error);
    }
}

module.exports = {
    migrateTourFlightData,
    rollbackMigration,
    checkMigrationResult
};

// Ch·∫°y migration n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    // Load environment variables
    require('dotenv').config();
    
    const args = process.argv.slice(2);
    const command = args[0];
    
    const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/hotelbooking';
    console.log('üîó K·∫øt n·ªëi MongoDB:', MONGODB_URI.replace(/:\/\/[^:]+:[^@]+@/, '://***:***@'));
    
    mongoose.connect(MONGODB_URI)
        .then(async () => {
            console.log('üì° ƒê√£ k·∫øt n·ªëi MongoDB');
            
            switch (command) {
                case 'migrate':
                    await migrateTourFlightData();
                    break;
                case 'rollback':
                    await rollbackMigration();
                    break;
                case 'check':
                    await checkMigrationResult();
                    break;
                default:
                    console.log('üìñ S·ª≠ d·ª•ng:');
                    console.log('  node migrateTourFlightData.js migrate   - Ch·∫°y migration');
                    console.log('  node migrateTourFlightData.js rollback  - Rollback migration');
                    console.log('  node migrateTourFlightData.js check     - Ki·ªÉm tra k·∫øt qu·∫£');
            }
            
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
            process.exit(1);
        });
}