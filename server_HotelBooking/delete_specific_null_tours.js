require('dotenv').config();
const mongoose = require('mongoose');
const DateTour = require('./src/models/Tour/DateTour');
const Tour = require('./src/models/Tour/TourModel');

const deleteSpecificNullTours = async () => {
    try {
        // K·∫øt n·ªëi MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/HotelBooking');
        console.log('ƒê√£ k·∫øt n·ªëi MongoDB');
        
        // Danh s√°ch ID c·ª• th·ªÉ t·ª´ API response c√≥ tour NULL
        const nullTourIds = [
            '686f1af8ff57e3f1aac86029',
            '686f1af8ff57e3f1aac8602a', 
            '687e10c8ccde3ce5ab516c02',
            '687e10c8ccde3ce5ab516c03'
        ];
        
        console.log(`\nS·∫Ω x√≥a ${nullTourIds.length} DateTour records c√≥ tour NULL:`);
        nullTourIds.forEach(id => console.log(`- ${id}`));
        
        // Ki·ªÉm tra c√°c record n√†y tr∆∞·ªõc khi x√≥a
        console.log('\n=== Ki·ªÉm tra records tr∆∞·ªõc khi x√≥a ===');
        for (const id of nullTourIds) {
            try {
                const record = await DateTour.findById(id);
                if (record) {
                    console.log(`‚úì Found: ${id} - Tour ID: ${record.tour || 'NULL'} - Date: ${record.dateTour}`);
                } else {
                    console.log(`‚úó Not found: ${id}`);
                }
            } catch (err) {
                console.log(`‚úó Error checking ${id}: ${err.message}`);
            }
        }
        
        // X√≥a c√°c records
        if (process.argv.includes('--delete')) {
            console.log('\nüóëÔ∏è  ƒêang x√≥a c√°c records...');
            
            const deleteResult = await DateTour.deleteMany({ 
                _id: { $in: nullTourIds.map(id => new mongoose.Types.ObjectId(id)) } 
            });
            
            console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.deletedCount} records`);
            
            // Ki·ªÉm tra l·∫°i API
            console.log('\nüîÑ ƒê·ª£i 2 gi√¢y r·ªìi ki·ªÉm tra API...');
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // Test API b·∫±ng axios
            const axios = require('axios');
            try {
                const response = await axios.get('http://localhost:3002/api/status/upcoming');
                const tours = response.data.data;
                const nullTours = tours.filter(tour => !tour.tour);
                
                console.log(`API Response - Total: ${tours.length}, NULL tours: ${nullTours.length}`);
                
                if (nullTours.length === 0) {
                    console.log('üéâ Th√†nh c√¥ng! Kh√¥ng c√≤n tour NULL n√†o trong API.');
                } else {
                    console.log('‚ö†Ô∏è  V·∫´n c√≤n tour NULL:');
                    nullTours.forEach(tour => {
                        console.log(`  - ${tour._id}`);
                    });
                }
            } catch (apiErr) {
                console.log('‚ùå L·ªói khi test API:', apiErr.message);
            }
        } else {
            console.log('\nüí° ƒê·ªÉ x√≥a c√°c records n√†y, ch·∫°y l·ªánh:');
            console.log('node delete_specific_null_tours.js --delete');
        }
        
    } catch (error) {
        console.error('L·ªói:', error.message);
    } finally {
        await mongoose.disconnect();
        console.log('\nƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
    }
};

deleteSpecificNullTours();