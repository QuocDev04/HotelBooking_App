require('dotenv').config();
const mongoose = require('mongoose');
const DateTour = require('./src/models/Tour/DateTour');
const Tour = require('./src/models/Tour/TourModel');

const fixCloudDatabase = async () => {
    try {
        // S·ª≠ d·ª•ng connection string t·ª´ .env (MongoDB Atlas)
        const mongoUri = process.env.MONGODB_URI;
        console.log('K·∫øt n·ªëi ƒë·∫øn MongoDB Atlas...');
        console.log('URI:', mongoUri.substring(0, 50) + '...');
        
        await mongoose.connect(mongoUri);
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB Atlas');
        
        // L·∫•y d·ªØ li·ªáu gi·ªëng nh∆∞ API
        console.log('\nüîç Ki·ªÉm tra d·ªØ li·ªáu upcoming tours...');
        const upcomingTours = await DateTour.find({ status: 'upcoming' })
            .populate({
                path: 'tour',
                select: 'nameTour destination departure imagesTour durationTour priceTour maxPeople tourType transport'
            })
            .sort({ dateTour: 1 });
        
        console.log(`T·ªïng s·ªë upcoming tours: ${upcomingTours.length}`);
        
        // Ph√¢n lo·∫°i tours
        const nullTours = upcomingTours.filter(tour => !tour.tour);
        const validTours = upcomingTours.filter(tour => tour.tour);
        
        console.log(`Tours h·ª£p l·ªá: ${validTours.length}`);
        console.log(`Tours c√≥ tour NULL: ${nullTours.length}`);
        
        if (nullTours.length > 0) {
            console.log('\n‚ùå Danh s√°ch tours c√≥ tour NULL:');
            nullTours.forEach((tour, index) => {
                console.log(`${index + 1}. ID: ${tour._id}`);
                console.log(`   Date: ${tour.dateTour}`);
                console.log(`   Status: ${tour.status}`);
                console.log(`   Available Seats: ${tour.availableSeats}`);
                console.log('');
            });
            
            if (process.argv.includes('--delete')) {
                console.log(`üóëÔ∏è  ƒêang x√≥a ${nullTours.length} tours c√≥ tour NULL...`);
                
                const deleteIds = nullTours.map(tour => tour._id);
                const deleteResult = await DateTour.deleteMany({ _id: { $in: deleteIds } });
                
                console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.deletedCount} records t·ª´ MongoDB Atlas`);
                
                // Ki·ªÉm tra l·∫°i
                console.log('\nüîÑ Ki·ªÉm tra l·∫°i d·ªØ li·ªáu...');
                const remainingUpcoming = await DateTour.find({ status: 'upcoming' })
                    .populate('tour')
                    .sort({ dateTour: 1 });
                
                const stillNullTours = remainingUpcoming.filter(tour => !tour.tour);
                
                console.log(`Upcoming tours c√≤n l·∫°i: ${remainingUpcoming.length}`);
                console.log(`Tours v·∫´n c√≥ tour NULL: ${stillNullTours.length}`);
                
                if (stillNullTours.length === 0) {
                    console.log('üéâ Th√†nh c√¥ng! ƒê√£ x√≥a h·∫øt tours c√≥ tour NULL.');
                    
                    // Test API sau 2 gi√¢y
                    console.log('\n‚è≥ ƒê·ª£i 2 gi√¢y r·ªìi test API...');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                    const axios = require('axios');
                    try {
                        const response = await axios.get('http://localhost:3002/api/status/upcoming');
                        const apiTours = response.data.data;
                        const apiNullTours = apiTours.filter(tour => !tour.tour);
                        
                        console.log(`\nüìä K·∫øt qu·∫£ API:`);
                        console.log(`- Total tours: ${apiTours.length}`);
                        console.log(`- NULL tours: ${apiNullTours.length}`);
                        
                        if (apiNullTours.length === 0) {
                            console.log('üéâ HO√ÄN TH√ÄNH! API kh√¥ng c√≤n tr·∫£ v·ªÅ tour NULL.');
                        } else {
                            console.log('‚ö†Ô∏è  API v·∫´n tr·∫£ v·ªÅ tour NULL - c√≥ th·ªÉ c·∫ßn restart server.');
                        }
                    } catch (apiErr) {
                        console.log('‚ùå L·ªói khi test API:', apiErr.message);
                    }
                } else {
                    console.log('‚ö†Ô∏è  V·∫´n c√≤n tours c√≥ tour NULL.');
                }
            } else {
                console.log('\nüí° ƒê·ªÉ x√≥a c√°c tours c√≥ tour NULL, ch·∫°y:');
                console.log('node fix_cloud_database.js --delete');
            }
        } else {
            console.log('\n‚úÖ Kh√¥ng c√≥ tours n√†o c√≥ tour NULL!');
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        if (error.name === 'MongoNetworkError') {
            console.error('L·ªói k·∫øt n·ªëi MongoDB Atlas. Ki·ªÉm tra:');
            console.error('1. Internet connection');
            console.error('2. MongoDB Atlas credentials');
            console.error('3. IP whitelist trong MongoDB Atlas');
        }
    } finally {
        await mongoose.disconnect();
        console.log('\nüîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB Atlas');
    }
};

fixCloudDatabase();