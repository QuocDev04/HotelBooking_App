require('dotenv').config();
const { MongoClient, ObjectId } = require('mongodb');

const findAPICollection = async () => {
    let client;
    try {
        const mongoUri = process.env.MONGODB_URI;
        console.log('üîç T√åM COLLECTION CH·ª®A D·ªÆ LI·ªÜU API...');
        
        client = new MongoClient(mongoUri);
        await client.connect();
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB Atlas');
        
        const db = client.db();
        
        // IDs t·ª´ API response
        const apiIds = [
            '686f1af8ff57e3f1aac86029',
            '686f1af8ff57e3f1aac8602a', 
            '687e10c8ccde3ce5ab516c02',
            '688a35bf545cb6f652b91569',
            '687e10c8ccde3ce5ab516c03'
        ];
        
        console.log('\nüéØ T√¨m ki·∫øm IDs t·ª´ API response:');
        apiIds.forEach(id => console.log(`   - ${id}`));
        
        // L·∫•y t·∫•t c·∫£ collections
        const collections = await db.listCollections().toArray();
        console.log(`\nüìã Ki·ªÉm tra ${collections.length} collections...`);
        
        for (const collectionInfo of collections) {
            const collectionName = collectionInfo.name;
            console.log(`\nüîç Ki·ªÉm tra collection: ${collectionName}`);
            
            try {
                const collection = db.collection(collectionName);
                
                // T√¨m ki·∫øm t·ª´ng ID
                for (const id of apiIds) {
                    try {
                        const doc = await collection.findOne({ _id: new ObjectId(id) });
                        if (doc) {
                            console.log(`   ‚úÖ FOUND ID ${id} in collection ${collectionName}!`);
                            console.log(`   üìã Document:`, JSON.stringify(doc, null, 2));
                            
                            // Ki·ªÉm tra t·∫•t c·∫£ documents trong collection n√†y
                            const allDocs = await collection.find({}).toArray();
                            console.log(`   üìä Total documents in ${collectionName}: ${allDocs.length}`);
                            
                            // Ki·ªÉm tra upcoming records
                            const upcomingDocs = await collection.find({ status: 'upcoming' }).toArray();
                            console.log(`   üìà Upcoming documents: ${upcomingDocs.length}`);
                            
                            if (upcomingDocs.length > 0) {
                                console.log(`   üî• COLLECTION N√ÄY C√ì UPCOMING RECORDS!`);
                                
                                // ƒê·∫øm NULL tours
                                let nullCount = 0;
                                upcomingDocs.forEach(doc => {
                                    if (!doc.tour) nullCount++;
                                });
                                
                                console.log(`   ‚ùå Records c√≥ tour NULL: ${nullCount}`);
                                
                                if (nullCount > 0) {
                                    console.log(`   üéØ ƒê√ÇY L√Ä COLLECTION G√ÇY V·∫§N ƒê·ªÄ!`);
                                    
                                    // Li·ªát k√™ c√°c records NULL
                                    console.log(`   üìã Danh s√°ch records NULL:`);
                                    upcomingDocs.forEach((doc, index) => {
                                        if (!doc.tour) {
                                            console.log(`      ${index + 1}. ID: ${doc._id} | Date: ${doc.dateTour}`);
                                        }
                                    });
                                    
                                    // T·∫°o l·ªánh x√≥a
                                    const nullIds = upcomingDocs.filter(doc => !doc.tour).map(doc => doc._id);
                                    console.log(`\n   üóëÔ∏è  L·ªánh x√≥a records NULL:`);
                                    console.log(`   db.${collectionName}.deleteMany({ _id: { $in: [${nullIds.map(id => `ObjectId("${id}")`).join(', ')}] } })`);
                                }
                            }
                            
                            return; // T√¨m th·∫•y r·ªìi th√¨ d·ª´ng
                        }
                    } catch (err) {
                        // ID kh√¥ng h·ª£p l·ªá, b·ªè qua
                    }
                }
                
            } catch (error) {
                console.log(`   ‚ùå L·ªói ki·ªÉm tra collection ${collectionName}:`, error.message);
            }
        }
        
        console.log('\n‚ùå Kh√¥ng t√¨m th·∫•y collection n√†o ch·ª©a c√°c IDs t·ª´ API');
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    } finally {
        if (client) {
            await client.close();
            console.log('\nüîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB Atlas');
        }
    }
};

findAPICollection();