require('dotenv').config();
const mongoose = require('mongoose');
const DateTour = require('./src/models/Tour/DateTour');
const Tour = require('./src/models/Tour/TourModel');

const cleanBrokenReferences = async () => {
    try {
        // K·∫øt n·ªëi MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/HotelBooking');
        console.log('ƒê√£ k·∫øt n·ªëi MongoDB');
        
        // L·∫•y t·∫•t c·∫£ DateTour records
        const allDateTours = await DateTour.find({});
        console.log(`\nT·ªïng s·ªë DateTour records: ${allDateTours.length}`);
        
        // L·∫•y t·∫•t c·∫£ Tour IDs h·ª£p l·ªá
        const validTours = await Tour.find({}, '_id');
        const validTourIds = new Set(validTours.map(tour => tour._id.toString()));
        console.log(`T·ªïng s·ªë Tour h·ª£p l·ªá: ${validTours.length}`);
        
        // T√¨m DateTour records c√≥ tour ID kh√¥ng h·ª£p l·ªá
        const brokenRecords = [];
        const validRecords = [];
        
        for (const dateTour of allDateTours) {
            if (!dateTour.tour) {
                console.log(`‚ùå DateTour ${dateTour._id} c√≥ tour field NULL`);
                brokenRecords.push(dateTour);
            } else if (!validTourIds.has(dateTour.tour.toString())) {
                console.log(`‚ùå DateTour ${dateTour._id} tham chi·∫øu ƒë·∫øn tour ID kh√¥ng t·ªìn t·∫°i: ${dateTour.tour}`);
                brokenRecords.push(dateTour);
            } else {
                validRecords.push(dateTour);
            }
        }
        
        console.log(`\n=== K·∫øt qu·∫£ ===`);
        console.log(`Records h·ª£p l·ªá: ${validRecords.length}`);
        console.log(`Records b·ªã l·ªói: ${brokenRecords.length}`);
        
        if (brokenRecords.length > 0) {
            console.log(`\n=== Danh s√°ch records b·ªã l·ªói ===`);
            brokenRecords.forEach(record => {
                console.log(`- ID: ${record._id}`);
                console.log(`  Tour ID: ${record.tour || 'NULL'}`);
                console.log(`  Date: ${record.dateTour}`);
                console.log(`  Status: ${record.status}`);
                console.log('');
            });
            
            if (process.argv.includes('--delete')) {
                console.log(`üóëÔ∏è  ƒêang x√≥a ${brokenRecords.length} records b·ªã l·ªói...`);
                
                const deleteIds = brokenRecords.map(record => record._id);
                const deleteResult = await DateTour.deleteMany({ _id: { $in: deleteIds } });
                
                console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.deletedCount} records`);
                
                // Ki·ªÉm tra l·∫°i
                console.log('\nüîÑ Ki·ªÉm tra l·∫°i...');
                const remainingTours = await DateTour.find({});
                console.log(`DateTour records c√≤n l·∫°i: ${remainingTours.length}`);
                
                // Test API
                await new Promise(resolve => setTimeout(resolve, 1000));
                const axios = require('axios');
                try {
                    const response = await axios.get('http://localhost:3002/api/status/upcoming');
                    const tours = response.data.data;
                    const nullTours = tours.filter(tour => !tour.tour);
                    
                    console.log(`\nAPI Response:`);
                    console.log(`- Total tours: ${tours.length}`);
                    console.log(`- NULL tours: ${nullTours.length}`);
                    
                    if (nullTours.length === 0) {
                        console.log('üéâ Th√†nh c√¥ng! Kh√¥ng c√≤n tour NULL.');
                    } else {
                        console.log('‚ö†Ô∏è  V·∫´n c√≤n tour NULL - c√≥ th·ªÉ c·∫ßn restart server.');
                    }
                } catch (apiErr) {
                    console.log('‚ùå L·ªói API:', apiErr.message);
                }
            } else {
                console.log(`\nüí° ƒê·ªÉ x√≥a c√°c records b·ªã l·ªói, ch·∫°y:`);
                console.log(`node clean_broken_references.js --delete`);
            }
        } else {
            console.log(`\n‚úÖ Kh√¥ng c√≥ records b·ªã l·ªói!`);
        }
        
    } catch (error) {
        console.error('L·ªói:', error.message);
        console.error(error.stack);
    } finally {
        await mongoose.disconnect();
        console.log('\nƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
    }
};

cleanBrokenReferences();