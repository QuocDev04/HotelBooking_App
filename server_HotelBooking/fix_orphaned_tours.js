require('dotenv').config();
const mongoose = require('mongoose');
const DateTour = require('./src/models/Tour/DateTour');
const Tour = require('./src/models/Tour/TourModel');

const fixOrphanedTours = async () => {
    try {
        // K·∫øt n·ªëi MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/HotelBooking');
        console.log('ƒê√£ k·∫øt n·ªëi MongoDB');
        
        // T√¨m t·∫•t c·∫£ DateTour records
        const allDateTours = await DateTour.find({});
        console.log(`\nT·ªïng s·ªë DateTour records: ${allDateTours.length}`);
        
        const orphanedRecords = [];
        const validRecords = [];
        
        // Ki·ªÉm tra t·ª´ng record
        for (const dateTour of allDateTours) {
            if (!dateTour.tour) {
                console.log(`‚ùå DateTour ${dateTour._id} c√≥ tour ID l√† NULL`);
                orphanedRecords.push(dateTour);
                continue;
            }
            
            // Ki·ªÉm tra xem tour ID c√≥ t·ªìn t·∫°i kh√¥ng
            const tourExists = await Tour.findById(dateTour.tour);
            if (!tourExists) {
                console.log(`‚ùå DateTour ${dateTour._id} tham chi·∫øu ƒë·∫øn tour ID ${dateTour.tour} KH√îNG T·ªíN T·∫†I`);
                orphanedRecords.push(dateTour);
            } else {
                validRecords.push(dateTour);
            }
        }
        
        console.log(`\n=== K·∫øt qu·∫£ ki·ªÉm tra ===`);
        console.log(`Records h·ª£p l·ªá: ${validRecords.length}`);
        console.log(`Records orphaned: ${orphanedRecords.length}`);
        
        if (orphanedRecords.length > 0) {
            console.log(`\n=== Danh s√°ch records orphaned ===`);
            orphanedRecords.forEach(record => {
                console.log(`- ID: ${record._id}, Tour ID: ${record.tour || 'NULL'}, Date: ${record.dateTour}, Status: ${record.status}`);
            });
            
            // Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh ƒë·ªÉ x√≥a
            if (process.argv.includes('--delete')) {
                console.log(`\nüóëÔ∏è  ƒêang x√≥a ${orphanedRecords.length} records orphaned...`);
                
                const deleteIds = orphanedRecords.map(record => record._id);
                const deleteResult = await DateTour.deleteMany({ _id: { $in: deleteIds } });
                
                console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.deletedCount} records orphaned`);
                
                // Test l·∫°i API
                console.log(`\nüîÑ Ki·ªÉm tra l·∫°i d·ªØ li·ªáu sau khi x√≥a...`);
                const remainingTours = await DateTour.find({}).populate('tour');
                const nullTours = remainingTours.filter(tour => !tour.tour);
                
                console.log(`T·ªïng s·ªë DateTour c√≤n l·∫°i: ${remainingTours.length}`);
                console.log(`DateTour c√≥ tour NULL: ${nullTours.length}`);
                
                if (nullTours.length === 0) {
                    console.log(`üéâ ƒê√£ s·ª≠a xong! Kh√¥ng c√≤n tour NULL n√†o.`);
                } else {
                    console.log(`‚ö†Ô∏è  V·∫´n c√≤n ${nullTours.length} tour NULL`);
                }
            } else {
                console.log(`\nüí° ƒê·ªÉ x√≥a c√°c records orphaned n√†y, ch·∫°y l·ªánh:`);
                console.log(`node fix_orphaned_tours.js --delete`);
            }
        } else {
            console.log(`\n‚úÖ Kh√¥ng c√≥ records orphaned n√†o!`);
        }
        
    } catch (error) {
        console.error('L·ªói:', error.message);
    } finally {
        await mongoose.disconnect();
        console.log('\nƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
    }
};

fixOrphanedTours();