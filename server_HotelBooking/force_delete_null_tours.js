require('dotenv').config();
const { MongoClient, ObjectId } = require('mongodb');

const forceDeleteNullTours = async () => {
    let client;
    try {
        // K·∫øt n·ªëi tr·ª±c ti·∫øp b·∫±ng MongoDB driver (kh√¥ng qua Mongoose)
        const mongoUri = process.env.MONGODB_URI;
        console.log('K·∫øt n·ªëi tr·ª±c ti·∫øp ƒë·∫øn MongoDB Atlas...');
        
        client = new MongoClient(mongoUri);
        await client.connect();
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB Atlas');
        
        const db = client.db(); // S·ª≠ d·ª•ng database m·∫∑c ƒë·ªãnh t·ª´ URI
        const dateTourCollection = db.collection('datetours'); // Collection name th∆∞·ªùng l√† lowercase + plural
        const tourCollection = db.collection('tours');
        
        // L·∫•y t·∫•t c·∫£ tour IDs h·ª£p l·ªá
        console.log('\nüîç L·∫•y danh s√°ch Tour IDs h·ª£p l·ªá...');
        const validTours = await tourCollection.find({}, { projection: { _id: 1 } }).toArray();
        const validTourIds = new Set(validTours.map(tour => tour._id.toString()));
        console.log(`T·ªïng s·ªë Tour h·ª£p l·ªá: ${validTours.length}`);
        
        // L·∫•y t·∫•t c·∫£ DateTour records c√≥ status = 'upcoming'
        console.log('\nüîç Ki·ªÉm tra DateTour records...');
        const upcomingDateTours = await dateTourCollection.find({ status: 'upcoming' }).toArray();
        console.log(`T·ªïng s·ªë DateTour upcoming: ${upcomingDateTours.length}`);
        
        // T√¨m records c√≥ tour ID kh√¥ng h·ª£p l·ªá
        const invalidRecords = [];
        const validRecords = [];
        
        for (const record of upcomingDateTours) {
            if (!record.tour) {
                console.log(`‚ùå Record ${record._id} c√≥ tour field NULL`);
                invalidRecords.push(record);
            } else if (!validTourIds.has(record.tour.toString())) {
                console.log(`‚ùå Record ${record._id} tham chi·∫øu ƒë·∫øn tour ID kh√¥ng t·ªìn t·∫°i: ${record.tour}`);
                invalidRecords.push(record);
            } else {
                validRecords.push(record);
            }
        }
        
        console.log(`\nüìä K·∫øt qu·∫£:`);
        console.log(`Records h·ª£p l·ªá: ${validRecords.length}`);
        console.log(`Records kh√¥ng h·ª£p l·ªá: ${invalidRecords.length}`);
        
        if (invalidRecords.length > 0) {
            console.log(`\n‚ùå Danh s√°ch records kh√¥ng h·ª£p l·ªá:`);
            invalidRecords.forEach((record, index) => {
                console.log(`${index + 1}. ID: ${record._id}`);
                console.log(`   Tour ID: ${record.tour || 'NULL'}`);
                console.log(`   Date: ${record.dateTour}`);
                console.log(`   Available Seats: ${record.availableSeats}`);
                console.log('');
            });
            
            if (process.argv.includes('--delete')) {
                console.log(`üóëÔ∏è  ƒêang x√≥a ${invalidRecords.length} records kh√¥ng h·ª£p l·ªá...`);
                
                const deleteIds = invalidRecords.map(record => record._id);
                const deleteResult = await dateTourCollection.deleteMany({ _id: { $in: deleteIds } });
                
                console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.deletedCount} records`);
                
                // Ki·ªÉm tra l·∫°i
                console.log('\nüîÑ Ki·ªÉm tra l·∫°i...');
                const remainingUpcoming = await dateTourCollection.find({ status: 'upcoming' }).toArray();
                console.log(`DateTour upcoming c√≤n l·∫°i: ${remainingUpcoming.length}`);
                
                // Test API
                console.log('\n‚è≥ ƒê·ª£i 3 gi√¢y r·ªìi test API...');
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                const axios = require('axios');
                try {
                    const response = await axios.get('http://localhost:3002/api/status/upcoming');
                    const apiTours = response.data.data;
                    const apiNullTours = apiTours.filter(tour => !tour.tour);
                    
                    console.log(`\nüìä K·∫øt qu·∫£ API sau khi x√≥a:`);
                    console.log(`- Total tours: ${apiTours.length}`);
                    console.log(`- NULL tours: ${apiNullTours.length}`);
                    
                    if (apiNullTours.length === 0) {
                        console.log('üéâ TH√ÄNH C√îNG! API kh√¥ng c√≤n tr·∫£ v·ªÅ tour NULL.');
                        console.log('‚úÖ V·∫•n ƒë·ªÅ hi·ªÉn th·ªã N/A ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt.');
                    } else {
                        console.log('‚ö†Ô∏è  API v·∫´n tr·∫£ v·ªÅ tour NULL:');
                        apiNullTours.forEach(tour => {
                            console.log(`   - ${tour._id}`);
                        });
                    }
                } catch (apiErr) {
                    console.log('‚ùå L·ªói khi test API:', apiErr.message);
                }
            } else {
                console.log(`\nüí° ƒê·ªÉ x√≥a c√°c records kh√¥ng h·ª£p l·ªá, ch·∫°y:`);
                console.log(`node force_delete_null_tours.js --delete`);
            }
        } else {
            console.log(`\n‚úÖ T·∫•t c·∫£ records ƒë·ªÅu h·ª£p l·ªá!`);
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    } finally {
        if (client) {
            await client.close();
            console.log('\nüîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB Atlas');
        }
    }
};

forceDeleteNullTours();