import React, { useState, useEffect } from 'react';
import './HotelDetail.css';
import {
  Row,
  Col,
  Card,
  Button,
  Rate,
  Tag,
  Image,
  Divider,
  DatePicker,
  InputNumber,
  Select,
  message,
  Modal,
  Form,
  Input,
  Spin,
  Carousel,
  Typography,
  Space,
} from 'antd';
import {
  EnvironmentOutlined,
  PhoneOutlined,
  MailOutlined,
  CheckCircleOutlined,
  ArrowLeftOutlined,
} from '@ant-design/icons';
import { useParams, useNavigate, useSearchParams } from 'react-router-dom';
import axios from 'axios';
import moment from 'moment';

const { RangePicker } = DatePicker;
const { Option } = Select;
const { Title, Paragraph, Text } = Typography;

interface Hotel {
  _id: string;
  hotelName: string;
  description: string;
  location: {
    locationName: string;
    country: string;
  };
  starRating: number;
  hotelImages: string[];
  roomTypes: Array<{
    _id: string;
    typeName: string;
    basePrice: number;
    finalPrice: number;
    maxOccupancy: number;
    amenities: string[];
    images: string[];
    totalRooms: number;
    discountPercentage: number;
  }>;
  hotelAmenities: Array<{
    name: string;
  }>;
  policies: {
    checkIn: string;
    checkOut: string;
    petPolicy: string;
    smokingPolicy: string;
  };
  contactInfo: {
    phone: string;
    email: string;
  };
  averageRating: number;
  totalReviews: number;
}

interface RoomAvailability {
  roomTypeIndex: number;
  roomType: any;
  availableRooms: number;
}

const HotelDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [form] = Form.useForm();
  
  const [hotel, setHotel] = useState<Hotel | null>(null);
  const [loading, setLoading] = useState(true);
  const [availability, setAvailability] = useState<RoomAvailability[]>([]);
  const [checkingAvailability, setCheckingAvailability] = useState(false);
  const [bookingModalVisible, setBookingModalVisible] = useState(false);
  const [selectedRoomType, setSelectedRoomType] = useState<any>(null);
  const [bookingLoading, setBookingLoading] = useState(false);
  
  // Get initial values from URL params
  const initialCheckIn = searchParams.get('checkIn') || moment().add(1, 'day').format('YYYY-MM-DD');
  const initialCheckOut = searchParams.get('checkOut') || moment().add(2, 'days').format('YYYY-MM-DD');
  const initialGuests = Number(searchParams.get('guests')) || 2;
  
  const [checkInDate, setCheckInDate] = useState(initialCheckIn);
  const [checkOutDate, setCheckOutDate] = useState(initialCheckOut);
  const [guests, setGuests] = useState(initialGuests);
  const [datePickerValue, setDatePickerValue] = useState<any>(null);

  useEffect(() => {
    if (id) {
      fetchHotelDetail();
    }
  }, [id]);

  // ƒê·ªìng b·ªô datePickerValue v·ªõi checkInDate v√† checkOutDate
  useEffect(() => {
    if (checkInDate && checkOutDate) {
      setDatePickerValue([moment(checkInDate), moment(checkOutDate)]);
    } else {
      setDatePickerValue(null);
    }
  }, [checkInDate, checkOutDate]);

  const fetchHotelDetail = async () => {
    try {
      const response = await axios.get(`http://localhost:8080/api/hotels/${id}`);
      if (response.data.success) {
        setHotel(response.data.data);
        // Ki·ªÉm tra availability sau khi load hotel
        if (checkInDate && checkOutDate) {
          checkAvailability(response.data.data);
        }
      } else {
        message.error('Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n');
        navigate('/hotels');
      }
    } catch (error) {
      message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin kh√°ch s·∫°n');
      navigate('/hotels');
    } finally {
      setLoading(false);
    }
  };

  const checkAvailability = async (hotelData?: Hotel) => {
    const currentHotel = hotelData || hotel;
    if (!currentHotel || !checkInDate || !checkOutDate) return;
    
    setCheckingAvailability(true);
    try {
      const response = await axios.get(
        `http://localhost:8080/api/hotels/${currentHotel._id}/availability?checkIn=${checkInDate}&checkOut=${checkOutDate}`
      );
      
      if (response.data.success) {
        setAvailability(response.data.data.availableRoomTypes || []);
      }
    } catch (error) {
      console.error('Error checking availability:', error);
    } finally {
      setCheckingAvailability(false);
    }
  };

  const handleDateChange = (dates: any) => {
    setDatePickerValue(dates);
    
    if (!dates || dates.length === 0) {
      setCheckInDate('');
      setCheckOutDate('');
      setAvailability([]);
      return;
    }
    
    if (dates && dates.length === 2 && dates[0] && dates[1]) {
      const checkIn = moment(dates[0]);
      const checkOut = moment(dates[1]);
      
      const daysDiff = checkOut.diff(checkIn, 'days');
      if (daysDiff < 1) {
        message.error('Ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng √≠t nh·∫•t 1 ng√†y');
        return;
      }
      
      if (daysDiff > 30) {
        message.error('Th·ªùi gian l∆∞u tr√∫ kh√¥ng ƒë∆∞·ª£c qu√° 30 ng√†y');
        return;
      }
      
      const newCheckIn = checkIn.format('YYYY-MM-DD');
      const newCheckOut = checkOut.format('YYYY-MM-DD');
      
      setCheckInDate(newCheckIn);
      setCheckOutDate(newCheckOut);
      
      if (hotel) {
        checkAvailability();
      }
    }
  };

  const handleBookRoom = (roomType: any, availableRooms: number, price: number) => {
    setSelectedRoomType({ ...roomType, availableRooms, price });
    setBookingModalVisible(true);
  };

  const handleBookingSubmit = async (values: any) => {
    setBookingLoading(true);
    try {
      const bookingData = {
        hotelId: hotel?._id,
        roomTypeIndex: hotel?.roomTypes.findIndex(rt => rt._id === selectedRoomType._id),
        checkInDate,
        checkOutDate,
        numberOfRooms: values.numberOfRooms,
        totalGuests: guests,
        guestInfo: {
          fullName: values.fullName,
          email: values.email,
          phone: values.phone,
          specialRequests: values.specialRequests || ''
        },
        payment_method: values.paymentMethod
      };

      const response = await axios.post('http://localhost:8080/api/hotel-booking', bookingData);
      
      if (response.data.success) {
        message.success('ƒê·∫∑t ph√≤ng th√†nh c√¥ng!');
        setBookingModalVisible(false);
        form.resetFields();
        checkAvailability();
      } else {
        message.error(response.data.message || 'ƒê·∫∑t ph√≤ng th·∫•t b·∫°i');
      }
    } catch (error: any) {
      message.error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t ph√≤ng');
    } finally {
      setBookingLoading(false);
    }
  };

  if (loading) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <Spin size="large" />
      </div>
    );
  }

  if (!hotel) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <Text>Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n</Text>
      </div>
    );
  }

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: '80px auto 0 auto' }}>
      {/* Header */}
      <div style={{ marginBottom: '20px' }}>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/hotels')}
          style={{ marginBottom: '16px' }}
        >
          Quay l·∫°i
        </Button>
        
        <Title level={2}>{hotel.hotelName}</Title>
        <div style={{ display: 'flex', alignItems: 'center', gap: '16px', marginBottom: '16px' }}>
          <Rate disabled defaultValue={hotel.starRating} />
          <Text><EnvironmentOutlined /> {hotel.location.locationName}, {hotel.location.country}</Text>
          <Text>({hotel.totalReviews} ƒë√°nh gi√°)</Text>
        </div>
      </div>

      <Row gutter={[24, 24]}>
        {/* Left Column - Hotel Info */}
        <Col xs={24} lg={16}>
          {/* Images */}
          {hotel.hotelImages && hotel.hotelImages.length > 0 ? (
            <Card style={{ marginBottom: '24px' }}>
              <Carousel autoplay>
                {hotel.hotelImages.map((image, index) => (
                  <div key={index}>
                    <Image
                      src={image}
                      alt={`${hotel.hotelName} - ${index + 1}`}
                      style={{ width: '100%', height: '400px', objectFit: 'cover' }}
                    />
                  </div>
                ))}
              </Carousel>
            </Card>
          ) : (
            <Card style={{ marginBottom: '24px' }}>
              <div style={{
                width: '100%',
                height: '400px',
                background: '#f5f5f5',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                flexDirection: 'column'
              }}>
                <div style={{ fontSize: '48px', marginBottom: '16px' }}>üè®</div>
                <Text>Kh√¥ng c√≥ h√¨nh ·∫£nh kh√°ch s·∫°n</Text>
              </div>
            </Card>
          )}

          {/* Hotel Description */}
          <Card title="M√¥ t·∫£ kh√°ch s·∫°n" style={{ marginBottom: '24px' }}>
            <Paragraph>{hotel.description}</Paragraph>
          </Card>

          {/* Amenities */}
          {hotel.hotelAmenities && hotel.hotelAmenities.length > 0 && (
            <Card title="Ti·ªán √≠ch" style={{ marginBottom: '24px' }}>
              <Row gutter={[16, 16]}>
                {hotel.hotelAmenities.map((amenity, index) => (
                  <Col key={index} xs={12} sm={8} md={6}>
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: '8px' }} />
                      <span>{typeof amenity === 'string' ? amenity : (typeof amenity.name === 'string' ? amenity.name : (amenity.name?.name || amenity || 'Ti·ªán √≠ch'))}</span>
                    </div>
                  </Col>
                ))}
              </Row>
            </Card>
          )}

          {/* Policies */}
          <Card title="Ch√≠nh s√°ch kh√°ch s·∫°n" style={{ marginBottom: '24px' }}>
            <Row gutter={[16, 16]}>
              <Col span={12}>
                <Text strong>Gi·ªù nh·∫≠n ph√≤ng:</Text> {hotel.policies.checkIn}
              </Col>
              <Col span={12}>
                <Text strong>Gi·ªù tr·∫£ ph√≤ng:</Text> {hotel.policies.checkOut}
              </Col>
              <Col span={24}>
                <Text strong>Ch√≠nh s√°ch th√∫ c∆∞ng:</Text> {hotel.policies.petPolicy === 'true' || hotel.policies.petPolicy === true ? 'ƒê∆∞·ª£c ph√©p' : 'Kh√¥ng ƒë∆∞·ª£c ph√©p'}
              </Col>
              <Col span={24}>
                <Text strong>Ch√≠nh s√°ch h√∫t thu·ªëc:</Text> {hotel.policies.smokingPolicy === 'true' || hotel.policies.smokingPolicy === true ? 'ƒê∆∞·ª£c ph√©p' : 'Kh√¥ng ƒë∆∞·ª£c ph√©p'}
              </Col>
            </Row>
          </Card>

          {/* Contact Info */}
          <Card title="Th√¥ng tin li√™n h·ªá">
            <Space direction="vertical">
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <PhoneOutlined style={{ marginRight: 8 }} />
                <Text>{hotel.contactInfo.phone}</Text>
              </div>
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <MailOutlined style={{ marginRight: 8 }} />
                <Text>{hotel.contactInfo.email}</Text>
              </div>
            </Space>
          </Card>
        </Col>

        {/* Right Column - Booking */}
        <Col xs={24} lg={8}>
          <Card title="ƒê·∫∑t ph√≤ng" style={{ position: 'sticky', top: '24px' }}>
            <div style={{ marginBottom: 16 }}>
              <Text strong>Ch·ªçn ng√†y:</Text>
              <RangePicker
                style={{ width: '100%', marginTop: 8 }}
                value={datePickerValue}
                onChange={handleDateChange}
                disabledDate={(current) => current && current < moment().startOf('day')}
                placeholder={['Ng√†y nh·∫≠n ph√≤ng', 'Ng√†y tr·∫£ ph√≤ng']}
                format="DD/MM/YYYY"
              />
            </div>
            
            <div style={{ marginBottom: 16 }}>
              <Text strong>S·ªë kh√°ch:</Text>
              <InputNumber
                min={1}
                max={10}
                value={guests}
                onChange={(value) => setGuests(value || 1)}
                style={{ width: '100%', marginTop: 8 }}
              />
            </div>
            
            <Divider />
            
            <div style={{ marginBottom: 16 }}>
              <Text strong>Lo·∫°i ph√≤ng c√≥ s·∫µn:</Text>
              {checkingAvailability && (
                <div style={{ textAlign: 'center', padding: '20px 0' }}>
                  <Spin spinning={true} tip="ƒêang ki·ªÉm tra ph√≤ng tr·ªëng...">
                    <div style={{ minHeight: '50px' }}></div>
                  </Spin>
                </div>
              )}
            </div>
            
            {!checkInDate || !checkOutDate ? (
              <div style={{ textAlign: 'center', padding: '30px 20px', background: '#f5f5f5', borderRadius: '8px' }}>
                <Text>Vui l√≤ng ch·ªçn ng√†y nh·∫≠n v√† tr·∫£ ph√≤ng ƒë·ªÉ xem ph√≤ng tr·ªëng</Text>
              </div>
            ) : !checkingAvailability && availability.length === 0 ? (
              <div style={{ textAlign: 'center', padding: '30px 20px', background: '#fff2e8', borderRadius: '8px' }}>
                <Text>Kh√¥ng c√≥ ph√≤ng tr·ªëng trong th·ªùi gian n√†y</Text>
              </div>
            ) : null}
            
            {!checkingAvailability && availability.map((room, index) => {
              const roomType = room.roomType;
              if (!roomType) return null;
              
              return (
                <Card key={index} size="small" style={{ marginBottom: 12 }}>
                  <div style={{ marginBottom: 8 }}>
                    <Text strong>{roomType.typeName || 'Kh√¥ng c√≥ t√™n'}</Text>
                    <div style={{ fontSize: '12px', color: '#666' }}>
                      S·ª©c ch·ª©a: {roomType.maxOccupancy || 0} kh√°ch
                    </div>
                  </div>
                  
                  <div style={{ marginBottom: 8 }}>
                    {roomType.amenities && roomType.amenities.slice(0, 3).map((amenity: string, i: number) => (
                      <Tag key={i} size="small">{typeof amenity === 'string' ? amenity : (typeof amenity.name === 'string' ? amenity.name : (amenity.name?.name || amenity || 'Ti·ªán √≠ch'))}</Tag>
                    ))}
                  </div>
                  
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <div>
                      <div style={{ fontSize: '1.1rem', fontWeight: 'bold', color: '#1890ff' }}>
                        {roomType.finalPrice ? roomType.finalPrice.toLocaleString('vi-VN') : '0'} VNƒê
                      </div>
                      <div style={{ fontSize: '12px', color: '#999' }}>/ ƒë√™m</div>
                      <div style={{ fontSize: '12px', color: '#666' }}>
                        C√≤n {room.availableRooms} ph√≤ng
                      </div>
                    </div>
                    
                    <Button
                      type="primary"
                      size="small"
                      disabled={room.availableRooms === 0}
                      onClick={() => handleBookRoom(roomType, room.availableRooms, roomType.finalPrice || 0)}
                    >
                      ƒê·∫∑t ph√≤ng
                    </Button>
                  </div>
                </Card>
              );
            })}
          </Card>
        </Col>
      </Row>

      {/* Booking Modal */}
      <Modal
        title="ƒê·∫∑t ph√≤ng kh√°ch s·∫°n"
        open={bookingModalVisible}
        onCancel={() => {
          setBookingModalVisible(false);
          setSelectedRoomType(null);
          form.resetFields();
        }}
        footer={null}
        width={600}
      >
        {selectedRoomType && (
          <Form
            form={form}
            layout="vertical"
            onFinish={handleBookingSubmit}
          >
            <div style={{ marginBottom: 16, padding: 16, backgroundColor: '#f5f5f5', borderRadius: 8 }}>
              <Title level={4}>Th√¥ng tin ƒë·∫∑t ph√≤ng</Title>
              <p><strong>Kh√°ch s·∫°n:</strong> {hotel.hotelName}</p>
              <p><strong>Lo·∫°i ph√≤ng:</strong> {selectedRoomType?.typeName || 'Kh√¥ng c√≥ t√™n'}</p>
              <p><strong>Ng√†y nh·∫≠n ph√≤ng:</strong> {moment(checkInDate).format('DD/MM/YYYY')}</p>
              <p><strong>Ng√†y tr·∫£ ph√≤ng:</strong> {moment(checkOutDate).format('DD/MM/YYYY')}</p>
              <p><strong>S·ªë ƒë√™m:</strong> {moment(checkOutDate).diff(moment(checkInDate), 'days')} ƒë√™m</p>
            </div>

            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  label="H·ªç v√† t√™n"
                  name="fullName"
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!' }]}
                >
                  <Input placeholder="Nh·∫≠p h·ªç v√† t√™n" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  label="S·ªë ƒëi·ªán tho·∫°i"
                  name="phone"
                  rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!' }]}
                >
                  <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
                </Form.Item>
              </Col>
            </Row>

            <Form.Item
              label="Email"
              name="email"
              rules={[
                { required: true, message: 'Vui l√≤ng nh·∫≠p email!' },
                { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá!' }
              ]}
            >
              <Input placeholder="Nh·∫≠p email" />
            </Form.Item>

            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  label="S·ªë l∆∞·ª£ng ph√≤ng"
                  name="numberOfRooms"
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng ph√≤ng!' }]}
                  initialValue={1}
                >
                  <InputNumber
                    min={1}
                    max={selectedRoomType.availableRooms}
                    style={{ width: '100%' }}
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  label="Ph∆∞∆°ng th·ª©c thanh to√°n"
                  name="paymentMethod"
                  rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!' }]}
                >
                  <Select placeholder="Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n">
                    <Option value="cash">Ti·ªÅn m·∫∑t</Option>
                    <Option value="bank_transfer">Chuy·ªÉn kho·∫£n</Option>
                  </Select>
                </Form.Item>
              </Col>
            </Row>

            <Form.Item
              label="Y√™u c·∫ßu ƒë·∫∑c bi·ªát"
              name="specialRequests"
            >
              <Input.TextArea rows={3} placeholder="Nh·∫≠p y√™u c·∫ßu ƒë·∫∑c bi·ªát (t√πy ch·ªçn)" />
            </Form.Item>

            <Form.Item>
              <Space>
                <Button type="primary" htmlType="submit" loading={bookingLoading}>
                  X√°c nh·∫≠n ƒë·∫∑t ph√≤ng
                </Button>
                <Button onClick={() => {
                  setBookingModalVisible(false);
                  setSelectedRoomType(null);
                  form.resetFields();
                }}>
                  H·ªßy
                </Button>
              </Space>
            </Form.Item>
          </Form>
        )}
      </Modal>
    </div>
  );
};

export default HotelDetail;