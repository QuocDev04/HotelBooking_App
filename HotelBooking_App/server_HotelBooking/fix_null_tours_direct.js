require('dotenv').config();
const mongoose = require('mongoose');
const DateTour = require('./src/models/Tour/DateTour');
const Tour = require('./src/models/Tour/TourModel');

const fixNullToursDirect = async () => {
    try {
        // K·∫øt n·ªëi MongoDB
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/HotelBooking');
        console.log('ƒê√£ k·∫øt n·ªëi MongoDB');
        
        // L·∫•y d·ªØ li·ªáu gi·ªëng nh∆∞ API
        const toursWithPopulate = await DateTour.find({ status: 'upcoming' })
            .populate({
                path: 'tour',
                select: 'nameTour destination departure imagesTour durationTour priceTour maxPeople tourType transport'
            })
            .sort({ dateTour: 1 });
        
        console.log(`\nT·ªïng s·ªë tour upcoming: ${toursWithPopulate.length}`);
        
        // T√¨m c√°c record c√≥ tour null sau khi populate
        const nullTourRecords = toursWithPopulate.filter(record => !record.tour);
        const validTourRecords = toursWithPopulate.filter(record => record.tour);
        
        console.log(`Records c√≥ tour h·ª£p l·ªá: ${validTourRecords.length}`);
        console.log(`Records c√≥ tour NULL: ${nullTourRecords.length}`);
        
        if (nullTourRecords.length > 0) {
            console.log(`\n=== Danh s√°ch records c√≥ tour NULL ===`);
            nullTourRecords.forEach(record => {
                console.log(`- DateTour ID: ${record._id}`);
                console.log(`  Tour ID: ${record.tour || 'NULL'}`);
                console.log(`  Date: ${record.dateTour}`);
                console.log(`  Status: ${record.status}`);
                console.log(`  Available Seats: ${record.availableSeats}`);
                console.log('');
            });
            
            // Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh ƒë·ªÉ x√≥a
            if (process.argv.includes('--delete')) {
                console.log(`üóëÔ∏è  ƒêang x√≥a ${nullTourRecords.length} records c√≥ tour NULL...`);
                
                const deleteIds = nullTourRecords.map(record => record._id);
                const deleteResult = await DateTour.deleteMany({ _id: { $in: deleteIds } });
                
                console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.deletedCount} records`);
                
                // Ki·ªÉm tra l·∫°i
                console.log(`\nüîÑ Ki·ªÉm tra l·∫°i sau khi x√≥a...`);
                const remainingTours = await DateTour.find({ status: 'upcoming' })
                    .populate('tour')
                    .sort({ dateTour: 1 });
                
                const stillNullTours = remainingTours.filter(tour => !tour.tour);
                
                console.log(`T·ªïng s·ªë tour upcoming c√≤n l·∫°i: ${remainingTours.length}`);
                console.log(`Tour c√≥ object NULL: ${stillNullTours.length}`);
                
                if (stillNullTours.length === 0) {
                    console.log(`üéâ ƒê√£ s·ª≠a xong! Kh√¥ng c√≤n tour NULL n√†o.`);
                } else {
                    console.log(`‚ö†Ô∏è  V·∫´n c√≤n ${stillNullTours.length} tour NULL`);
                }
            } else {
                console.log(`\nüí° ƒê·ªÉ x√≥a c√°c records c√≥ tour NULL, ch·∫°y l·ªánh:`);
                console.log(`node fix_null_tours_direct.js --delete`);
            }
        } else {
            console.log(`\n‚úÖ Kh√¥ng c√≥ records n√†o c√≥ tour NULL!`);
        }
        
    } catch (error) {
        console.error('L·ªói:', error.message);
    } finally {
        await mongoose.disconnect();
        console.log('\nƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
    }
};

fixNullToursDirect();