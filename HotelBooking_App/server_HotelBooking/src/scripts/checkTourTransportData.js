const mongoose = require('mongoose');
const Tour = require('../models/Tour/TourModel');
const Transport = require('../models/Transport/TransportModel');

// Load environment variables
require('dotenv').config();

async function checkTourTransportData() {
    try {
        console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu tour v√† transport...');
        
        // Ki·ªÉm tra t·∫•t c·∫£ transport
        const transports = await Transport.find({});
        console.log(`üöå T√¨m th·∫•y ${transports.length} transport:`);
        
        const airplaneTransports = transports.filter(t => t.transportType === 'M√°y Bay');
        console.log(`‚úàÔ∏è Trong ƒë√≥ c√≥ ${airplaneTransports.length} transport lo·∫°i m√°y bay:`);
        
        airplaneTransports.forEach(transport => {
            console.log(`   - ${transport.transportName} (${transport.transportType})`);
            console.log(`     Gi√° v√©: ${transport.flightPrice?.toLocaleString() || 0} VNƒê`);
        });
        
        // Ki·ªÉm tra t·∫•t c·∫£ tour
        const tours = await Tour.find({}).populate('itemTransport.TransportId');
        console.log(`\nüéØ T√¨m th·∫•y ${tours.length} tour:`);
        
        for (const tour of tours) {
            console.log(`\nüìã Tour: "${tour.nameTour}"`);
            console.log(`   - ID: ${tour._id}`);
            console.log(`   - includesFlight: ${tour.includesFlight}`);
            console.log(`   - Gi√° v√© m√°y bay: ${tour.flightPrice?.toLocaleString() || 0} VNƒê`);
            
            if (tour.itemTransport && tour.itemTransport.length > 0) {
                console.log(`   - Transport ƒë∆∞·ª£c ch·ªçn:`);
                tour.itemTransport.forEach(item => {
                    if (item.TransportId) {
                        console.log(`     * ${item.TransportId.transportName} (${item.TransportId.transportType})`);
                        if (item.TransportId.transportType === 'M√°y Bay') {
                            console.log(`       üî• TOUR N√ÄY C√ì TRANSPORT M√ÅY BAY!`);
                            console.log(`       - includesFlight: ${tour.includesFlight}`);
                            console.log(`       - Gi√° v√© transport: ${item.TransportId.flightPrice?.toLocaleString() || 0} VNƒê`);
                        }
                    } else {
                        console.log(`     * Transport ID kh√¥ng t·ªìn t·∫°i`);
                    }
                });
            } else {
                console.log(`   - Kh√¥ng c√≥ transport n√†o`);
            }
        }
        
        // T√¨m tour c√≥ m√°y bay nh∆∞ng ch∆∞a set includesFlight
        console.log('\nüîç T√¨m tour c√≥ m√°y bay nh∆∞ng ch∆∞a set includesFlight...');
        let foundIssues = 0;
        
        for (const tour of tours) {
            const hasAirplane = tour.itemTransport?.some(item => 
                item.TransportId && item.TransportId.transportType === 'M√°y Bay'
            );
            
            if (hasAirplane && !tour.includesFlight) {
                foundIssues++;
                console.log(`‚ö†Ô∏è  Tour "${tour.nameTour}" c√≥ m√°y bay nh∆∞ng includesFlight = false`);
            }
        }
        
        if (foundIssues === 0) {
            console.log('‚úÖ Kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ n√†o!');
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error);
    }
}

// K·∫øt n·ªëi MongoDB v√† ch·∫°y
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/hotelbooking';
console.log('üîó K·∫øt n·ªëi MongoDB:', MONGODB_URI.replace(/:\/\/[^:]+:[^@]+@/, '://***:***@'));

mongoose.connect(MONGODB_URI)
    .then(async () => {
        console.log('üì° ƒê√£ k·∫øt n·ªëi MongoDB\n');
        await checkTourTransportData();
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
        process.exit(1);
    });