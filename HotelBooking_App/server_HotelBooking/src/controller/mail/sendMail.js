require('dotenv/config');
const cron = require("node-cron");
const nodemailer = require("nodemailer");
const moment = require("moment-timezone");
const Booking = require("../../models/Tour/TourBooking");
const Slot = require("../../models/Tour/DateTour");
const HotelBooking = require("../../models/Hotel/HotelBooking");

// H√†m g·ª≠i mail chung
const sendMail = async ({ email, subject, html }) => {
    if (!email || !subject || !html) {
        throw new Error("Thi·∫øu email, subject ho·∫∑c html");
    }

    let transporter;
    try {
        transporter = nodemailer.createTransport({
            host: "smtp.gmail.com",
            service: "gmail",
            auth: {
                user: process.env.Mail_User,
                pass: process.env.Mail_Pass,
            },
            tls: { rejectUnauthorized: false },
        });

        const message = { from: process.env.Mail_User, to: email, subject, html };
        return await transporter.sendMail(message);
    } catch (error) {
        console.error("G·ª≠i mail th·∫•t b·∫°i:", error.message);
    } finally {
        if (transporter && typeof transporter.close === "function") {
            transporter.close();
        }
    }
};

// H√†m g·ª≠i mail nh·∫Øc nh·ªü tour
const sendMailTourDayAgo = async () => {
    try {
        const todayVN = moment().tz("Asia/Ho_Chi_Minh").startOf("day");
        const tomorrowVN = todayVN.clone().add(1, "day");

        const slots = await Slot.find({
            dateTour: {
                $gte: tomorrowVN.toDate(),
                $lt: tomorrowVN.clone().endOf("day").toDate(),
            },
        });

        console.log("Slots t√¨m ƒë∆∞·ª£c:", slots.map(s => ({ id: s._id, dateTour: s.dateTour })));

        for (let slot of slots) {
            const bookings = await Booking.find({ slotId: slot._id });

            for (let booking of bookings) {
                const tourDateFormatted = moment(slot.dateTour).tz("Asia/Ho_Chi_Minh")
                    .format("dddd, DD/MM/YYYY HH:mm");

                await sendMail({
                    email: booking.email,
                    subject: "Nh·∫Øc nh·ªü tour c·ªßa b·∫°n",
                    html: `
                        <p>Xin ch√†o <b>${booking.fullNameUser}</b>,</p>
                        <p>B·∫°n ƒë√£ ƒë·∫∑t tour c√≥ slot v√†o ng√†y <b>${tourDateFormatted}</b>.</p>
                        <p><b>T·ªïng ti·ªÅn:</b> ${booking.totalPriceTour.toLocaleString("vi-VN")} VND</p>
                        <p><b>Tr·∫°ng th√°i thanh to√°n:</b> ${booking.payment_status}</p>
                        <p>Ch√∫c b·∫°n c√≥ chuy·∫øn ƒëi vui v·∫ª!</p>
                    `,
                });

                console.log(`ƒê√£ g·ª≠i mail cho ${booking.email}`);
            }
        }
    } catch (error) {
        console.error("L·ªói khi g·ª≠i mail nh·∫Øc nh·ªü tour:", error);
    }
};

// H√†m g·ª≠i mail nh·∫Øc nh·ªü hotel
const sendMailHotelDayAgo = async () => {
    try {
        const todayVN = moment().tz("Asia/Ho_Chi_Minh").startOf("day");
        const tomorrowVN = todayVN.clone().add(1, "day");

        const bookings = await HotelBooking.find({
            checkInDate: {
                $gte: tomorrowVN.toDate(),
                $lt: tomorrowVN.clone().endOf("day").toDate(),
            },
        });

        console.log("Hotel bookings t√¨m ƒë∆∞·ª£c:", bookings.map(b => ({ id: b._id, checkInDate: b.checkInDate })));

        for (let booking of bookings) {
            const checkInFormatted = moment(booking.checkInDate).tz("Asia/Ho_Chi_Minh")
                .format("dddd, DD/MM/YYYY HH:mm");
            const checkOutFormatted = moment(booking.checkOutDate).tz("Asia/Ho_Chi_Minh")
                .format("dddd, DD/MM/YYYY HH:mm");

            await sendMail({
                email: booking.email,
                subject: "Nh·∫Øc nh·ªü ƒë·∫∑t ph√≤ng kh√°ch s·∫°n c·ªßa b·∫°n",
                html: `
                    <p>Xin ch√†o <b>${booking.fullNameUser}</b>,</p>
                    <p>B·∫°n ƒë√£ ƒë·∫∑t kh√°ch s·∫°n, ng√†y nh·∫≠n ph√≤ng l√† <b>${checkInFormatted}</b> v√† tr·∫£ ph√≤ng <b>${checkOutFormatted}</b>.</p>
                    <p><b>S·ªë ƒë√™m:</b> ${booking.numberOfNights}</p>
                    <p><b>S·ªë kh√°ch:</b> ${booking.totalGuests}</p>
                    <p><b>T·ªïng ti·ªÅn:</b> ${booking.totalPrice.toLocaleString("vi-VN")} VND</p>
                    <p><b>Tr·∫°ng th√°i thanh to√°n:</b> ${booking.payment_status}</p>
                    <p>Ch√∫c b·∫°n c√≥ k·ª≥ ngh·ªâ tho·∫£i m√°i!</p>
                `,
            });

            console.log(`ƒê√£ g·ª≠i mail nh·∫Øc nh·ªü hotel cho ${booking.email}`);
        }
    } catch (error) {
        console.error("L·ªói khi g·ª≠i mail nh·∫Øc nh·ªü hotel:", error);
    }
};

const sendMailBookingCashSuccess = async (booking, depositAmount, isFullPayment) => {
    try {
        await booking.populate({
            path: 'slotId',
            select: 'dateTour tour',
            populate: { path: 'tour', select: 'nameTour price finalPrice' }
        });

        const tourName = booking.slotId?.tour?.nameTour || 'N/A';
        const tourDate = booking.slotId?.dateTour
            ? moment(booking.slotId.dateTour).tz("Asia/Ho_Chi_Minh").format("dddd, DD/MM/YYYY")
            : 'N/A';

        const tourPrice = booking.slotId?.tour?.finalPrice ?? booking.slotId?.tour?.price ?? 0;
        const totalPrice = tourPrice.toLocaleString("vi-VN");

        const paymentDeadline = booking.cashPaymentDeadline
            ? moment(booking.cashPaymentDeadline).tz("Asia/Ho_Chi_Minh").format("HH:mm DD/MM/YYYY")
            : null;

        const paymentAddress = "S·ªë 81A ng√µ 295 - Ph·ªë B·∫±ng Li·ªát - Ph∆∞·ªùng Linh Nam - Qu·∫≠n Ho√†ng Mai - H√† N·ªôi";
        const workingTime = "9h00 - 17h30 t·ª´ th·ª© 2 - ƒë·∫øn th·ª© 6 v√† 9h00 - 12h00 th·ª© 7";

        await sendMail({
            email: booking.email,
            subject: `X√°c nh·∫≠n ƒë·∫∑t tour #${booking._id}`,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #28a745;">ƒê·∫∑t tour th√†nh c√¥ng!</h2>
                    <p>Xin ch√†o <b>${booking.fullNameUser}</b>,</p>
                    <p>B·∫°n ƒë√£ ƒë·∫∑t tour <b>${tourName}</b> th√†nh c√¥ng v√† ch·ªçn thanh to√°n ti·ªÅn m·∫∑t t·∫°i vƒÉn ph√≤ng.</p>
                    <p><b>Ng√†y ƒëi:</b> ${tourDate}</p>
                    <h3>Th√¥ng tin thanh to√°n:</h3>
                    <ul>
                        <li><strong>M√£ ƒë·∫∑t tour:</strong> ${booking._id}</li>
                        <li><strong>S·ªë ti·ªÅn c·∫ßn thanh to√°n:</strong> ${totalPrice} VNƒê</li>
                        ${!isFullPayment ? `<li><strong>S·ªë ti·ªÅn ƒë·∫∑t c·ªçc:</strong> ${depositAmount?.toLocaleString("vi-VN") || 0} VNƒê</li>` : ""}
                        ${paymentDeadline ? `<li><strong>H·∫°n thanh to√°n:</strong> ${paymentDeadline}</li>` : ""}
                        <li><strong>ƒê·ªãa ch·ªâ:</strong> ${paymentAddress}</li>
                        <li><strong>Th·ªùi gian:</strong> ${workingTime}</li>
                    </ul>

                    <h3>‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:</h3>
                    <ul>
                        <li>B·∫°n c√≥ 48 gi·ªù ƒë·ªÉ thanh to√°n ti·ªÅn c·ªçc k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm ƒë·∫∑t tour</li>
                        <li>Tour s·∫Ω t·ª± ƒë·ªông b·ªã h·ªßy n·∫øu qu√° th·ªùi h·∫°n thanh to√°n</li>
                        <li>Vui l√≤ng ƒë·∫øn vƒÉn ph√≤ng tr∆∞·ªõc th·ªùi h·∫°n ƒë·ªÉ ho√†n t·∫•t thanh to√°n</li>
                    </ul>

                    <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</p>
                </div>
            `,
        });

        console.log(`üìß ƒê√£ g·ª≠i mail x√°c nh·∫≠n cash booking cho ${booking.email}`);
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i mail cash booking:", error.message);
    }
};
const sendMailHotelBookingCashSuccess = async (booking) => {
    try {
        // Populate hotelId ƒë·ªÉ l·∫•y t√™n kh√°ch s·∫°n v√† ƒë·ªãa ch·ªâ
        const populatedBooking = await booking.populate({
            path: 'hotelId',
            select: 'hotelName address'
        });

        const hotelName = populatedBooking.hotelId?.hotelName || 'N/A';
        const hotelAddress = populatedBooking.hotelId?.address || 'N/A';
        const deadline = populatedBooking.cashPaymentDeadline
            ? moment(populatedBooking.cashPaymentDeadline).tz("Asia/Ho_Chi_Minh").format("HH:mm DD/MM/YYYY")
            : null;

        const workingTime = `9h00 - 17h30 (Th·ª© 2 - Th·ª© 6) | 9h00 - 12h00 (Th·ª© 7)`;

        // T·∫°o HTML chi ti·∫øt c√°c ph√≤ng
        const roomDetailsHtml = populatedBooking.roomBookings.map(rb => `
            <li style="margin-bottom: 10px;">
                <b>${rb.roomTypeName}</b> - ${rb.numberOfRooms} ph√≤ng<br/>
                Gi√°/ƒë√™m: ${rb.pricePerNight.toLocaleString('vi-VN')} VNƒê<br/>
                T·ªïng: ${rb.totalPrice.toLocaleString('vi-VN')} VNƒê<br/>
                Kh√°ch: ${rb.guests.map(g => g.fullName).join(', ') || 'Ch∆∞a nh·∫≠p'}
            </li>
        `).join('');

        await sendMail({
            email: populatedBooking.email,
            subject: `X√°c nh·∫≠n ƒë·∫∑t ph√≤ng kh√°ch s·∫°n #${populatedBooking._id}`,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #28a745;">ƒê·∫∑t ph√≤ng th√†nh c√¥ng!</h2>
                    <p>Xin ch√†o <b>${populatedBooking.fullNameUser}</b>,</p>
                    <p>B·∫°n ƒë√£ ch·ªçn thanh to√°n ti·ªÅn m·∫∑t t·∫°i vƒÉn ph√≤ng cho kh√°ch s·∫°n <b>${hotelName}</b>.</p>

                    <h3>Th√¥ng tin thanh to√°n:</h3>
                    <ul>
                        <li><strong>M√£ ƒë·∫∑t ph√≤ng:</strong> ${populatedBooking._id}</li>
                        <li><strong>S·ªë ti·ªÅn c·∫ßn thanh to√°n:</strong> ${populatedBooking.totalPrice.toLocaleString('vi-VN')} VNƒê</li>
                        ${deadline ? `<li><strong>H·∫°n thanh to√°n:</strong> ${deadline}</li>` : ""}
                        <li><strong>ƒê·ªãa ch·ªâ:</strong> ${hotelAddress}</li>
                        <li><strong>Th·ªùi gian l√†m vi·ªác:</strong> ${workingTime}</li>
                    </ul>

                    <h3>Chi ti·∫øt ph√≤ng:</h3>
                    <ul style="list-style: none; padding: 0;">
                        ${roomDetailsHtml}
                    </ul>

                    <h3>‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG:</h3>
                    <ul>
                        <li>B·∫°n c√≥ 48 gi·ªù ƒë·ªÉ thanh to√°n ti·ªÅn c·ªçc k·ªÉ t·ª´ th·ªùi ƒëi·ªÉm ƒë·∫∑t ph√≤ng</li>
                        <li>ƒê·∫∑t ph√≤ng s·∫Ω t·ª± ƒë·ªông b·ªã h·ªßy n·∫øu qu√° th·ªùi h·∫°n thanh to√°n</li>
                        <li>Vui l√≤ng ƒë·∫øn vƒÉn ph√≤ng tr∆∞·ªõc th·ªùi h·∫°n ƒë·ªÉ ho√†n t·∫•t thanh to√°n</li>
                    </ul>

                    <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</p>
                </div>
            `
        });

        console.log(`üìß ƒê√£ g·ª≠i mail x√°c nh·∫≠n cash booking kh√°ch s·∫°n cho ${populatedBooking.email}`);
    } catch (error) {
        console.error("‚ùå L·ªói g·ª≠i mail cash booking kh√°ch s·∫°n:", error.message);
    }
};


// Cron job ch·∫°y 8h s√°ng m·ªói ng√†y
cron.schedule("0 8 * * *", async () => {
    console.log("Ch·∫°y cron job g·ª≠i mail nh·∫Øc nh·ªü...");
    await sendMailTourDayAgo();
    await sendMailHotelDayAgo();
    console.log("Ho√†n th√†nh email nh·∫Øc nh·ªü");
});

module.exports = { sendMail, sendMailTourDayAgo, sendMailHotelDayAgo, sendMailBookingCashSuccess, sendMailHotelBookingCashSuccess };
